import streamlit as st
import pandas as pd
import plotly.express as px
import datetime
from dateutil.relativedelta import relativedelta
import psycopg2 
from psycopg2 import sql
import plotly.colors as colors
import numpy as np
import plotly.graph_objects as go

# --- CONFIGURA√á√ÉO DA P√ÅGINA ---
st.set_page_config(
    layout="wide",  # Define a largura m√°xima como a largura do navegador
    initial_sidebar_state="auto"
)

#@st.cache_resource(ttl=600) 
def get_connection():
    # As credenciais s√£o carregadas do secrets.toml (bloco [postgresql])
    conn_details = st.secrets["postgresql"] 
    
    conn = psycopg2.connect(
        host=conn_details["server"],
        database=conn_details["database"],
        user=conn_details["username"],
        password=conn_details["password"],
        port=conn_details["port"],
        sslmode='require' # O Neon exige SSL
    )
    return conn

@st.cache_data(ttl=600)
def consultar_dados(tabela_ou_view):
    """Consulta dados de uma tabela ou view e retorna um DataFrame."""
    # Assegure-se que o nome da tabela/view esteja em min√∫sculo!
    tabela_ou_view = tabela_ou_view.lower() 

    conn = None # Inicializa conn como None
    df = pd.DataFrame()
    
    try:
        conn = get_connection()
        # üí° Uso do sql.Identifier para seguran√ßa contra SQL Injection
        sql_query = sql.SQL("SELECT * FROM {}").format(sql.Identifier(tabela_ou_view))
        
        # O read_sql exige uma string, ent√£o montamos a query antes
        df = pd.read_sql(sql_query.as_string(conn), conn)
        
    except psycopg2.Error as e:
        # Exibe um erro amig√°vel ao usu√°rio
        st.error(f"Erro ao conectar ou consultar o banco de dados. Detalhes: {e}")
        # Retorna um DataFrame vazio se houver erro
        df = pd.DataFrame() 
        
    finally:
        # üí° GARANTE QUE A CONEX√ÉO √â FECHADA SEMPRE
        if conn is not None:
            conn.close()
            
    return df

def limpar_cache_dados():
    """Limpa o cache do Streamlit para for√ßar a recarga dos dados do banco."""
    # st.cache_data √© a decorator que usamos na consultar_dados
    st.cache_data.clear() 
    st.success("Cache de dados limpo. Recarregando as an√°lises...")
    st.rerun()

def inserir_dados(tabela, dados, campos):
    conn = None
    tabela_lower = tabela.lower()
    
    # GARANTE que os nomes de campo tamb√©m est√£o em min√∫sculo (Padr√£o PostgreSQL)
    campos_lower = [c.lower() for c in campos]
    
    # Constr√≥i o SQL: Exemplo: INSERT INTO dim_tipotransacao (dsc_tipotransacao) VALUES (%s)
    placeholders = ', '.join(['%s'] * len(dados))
    sql = f"INSERT INTO {tabela_lower} ({', '.join(campos_lower)}) VALUES ({placeholders})"
    
    try:
        conn = get_connection()
        cursor = conn.cursor()
        
        # 1. EXECU√á√ÉO: Passa o SQL e os dados (a tupla de valores)
        # Exemplo: cursor.execute("...", ('Receita',))
        cursor.execute(sql, dados) 
        
        # 2. COMMIT: ESSENCIAL para salvar os dados
        conn.commit() 
        
        # Feedback de Sucesso no Streamlit (Opcional, mas recomendado)
        st.success(f"Registro inserido com sucesso na tabela {tabela_lower.upper()}!")
        
        return True
        
    except psycopg2.Error as ex: # <<< LINHA 82 (Provavelmente este bloco)
        # ESTE BLOCO DE C√ìDIGO TEM QUE SER REC√âUADO
        st.error(f"Erro do banco de dados ao inserir: {ex}")
        if conn: conn.rollback()
        
    except Exception as e:
        # ESTE BLOCO DE C√ìDIGO TAMB√âM TEM QUE SER REC√âUADO
        st.error(f"Erro inesperado: {e}")
        if conn: conn.rollback()
        
    finally: # <<< LINHA 85 (Deve estar alinhada com try e except)
        if conn: conn.close()

def formulario_tipo_transacao():
    st.header("Cadastro e Manuten√ß√£o de Tipo de Transa√ß√£o")
    
    # ----------------------------------------------------
    # A) CADASTRO (MANTIDO)
    # ----------------------------------------------------
    st.subheader("1. Inserir Novo Tipo")
    
    with st.form("tipo_form"):
        # Campo de entrada
        descricao = st.text_input("Descri√ß√£o do Tipo (ex: Receita, Despesa)")
        
        submitted = st.form_submit_button("Inserir Novo Tipo")
        
        if submitted:
            if descricao:
                # Assume que a fun√ß√£o inserir_dados est√° definida
                inserir_dados(
                    tabela="dim_tipotransacao",
                    dados=(descricao,),
                    campos=("dsc_tipotransacao",)
                )
            else:
                st.warning("O campo Descri√ß√£o √© obrigat√≥rio.")

    # ----------------------------------------------------
    # B) VISUALIZA√á√ÉO E SELE√á√ÉO MANUAL (CORRE√á√ÉO DA L√ìGICA)
    # ----------------------------------------------------
    st.markdown("---")
    st.subheader("2. Editar ou Excluir Registros Existentes")
    
    df_tipos = consultar_dados("dim_tipotransacao")
    
    if df_tipos.empty:
        st.info("Nenhum tipo de transa√ß√£o registrado.")
        return

    # Renomea√ß√£o para exibi√ß√£o e sele√ß√£o
    df_exibicao = df_tipos.rename(columns={'id_tipotransacao': 'ID', 'dsc_tipotransacao': 'Descri√ß√£o'})[['ID', 'Descri√ß√£o']]
    
    # Exibe a tabela completa para refer√™ncia
    st.dataframe(df_exibicao, hide_index=True, use_container_width=True)
    
    # --- SELE√á√ÉO MANUAL DO ID ---
    lista_ids = [''] + df_exibicao['ID'].astype(str).tolist()
    id_selecionado_str = st.selectbox(
        "Selecione o ID do Tipo para Editar/Excluir:", 
        options=lista_ids, 
        key="tipo_id_selector" 
    )
    
    id_selecionado = None
    descricao_atual = None
    
    if id_selecionado_str and id_selecionado_str != '':
        try:
            id_selecionado = int(id_selecionado_str)
            
            # Busca os dados do ID selecionado no DataFrame de exibi√ß√£o
            dados_selecionados = df_exibicao[df_exibicao['ID'] == id_selecionado].iloc[0]
            descricao_atual = dados_selecionados['Descri√ß√£o']
            
            st.markdown(f"#### Manuten√ß√£o do Tipo: ID {id_selecionado} - {descricao_atual}")
            
            # --- BLOC DA EDI√á√ÉO ---
            with st.form("edicao_tipo_form"):
                novo_descricao = st.text_input("Nova Descri√ß√£o:", value=descricao_atual)
                
                # Bot√µes de A√ß√£o
                col_edit, col_delete = st.columns([1, 1])
                
                with col_edit:
                    edit_submitted = st.form_submit_button("Salvar Edi√ß√£o", type="secondary")
                with col_delete:
                     delete_clicked = st.form_submit_button("üî¥ Excluir Registro", type="primary")

                if edit_submitted:
                    if novo_descricao and novo_descricao != descricao_atual:
                        # Assumindo que atualizar_registro_dimensao est√° definida
                        campos_valores = {"dsc_tipotransacao": novo_descricao}
                        if atualizar_registro_dimensao("dim_tipotransacao", "id_tipotransacao", id_selecionado, campos_valores):
                            st.success(f"Tipo ID {id_selecionado} atualizado para '{novo_descricao}'.")
                            st.rerun()
                    elif novo_descricao == descricao_atual:
                        st.info("Nenhuma altera√ß√£o detectada para salvar.")
                    else:
                        st.warning("A descri√ß√£o n√£o pode ser vazia.")
                
                if delete_clicked:
                    # Armazena o ID no estado da sess√£o para a confirma√ß√£o fora do formul√°rio
                    # Usando chaves espec√≠ficas para esta dimens√£o (tipo)
                    st.session_state.confirm_delete_id_tipo = id_selecionado
                    st.session_state.confirm_delete_nome_tipo = descricao_atual
                    st.rerun() 
            # --- FIM BLOC DA EDI√á√ÉO ---

        except Exception as e:
            st.error(f"Erro ao carregar dados do ID: {e}")
            
    
    # --- L√ìGICA DE CONFIRMA√á√ÉO DE EXCLUS√ÉO ---
    if st.session_state.get('confirm_delete_id_tipo'):
        id_del = st.session_state.confirm_delete_id_tipo
        nome_del = st.session_state.confirm_delete_nome_tipo
        
        st.markdown("---")
        st.error(f"‚ö†Ô∏è CONFIRMA√á√ÉO DE EXCLUS√ÉO: Tem certeza que deseja EXCLUIR o tipo '{nome_del}' (ID {id_del})? Esta a√ß√£o √© irrevers√≠vel e pode causar erros de integridade em Transa√ß√µes.")
        
        col_conf_sim, col_conf_nao = st.columns(2)
        
        with col_conf_sim:
            if st.button("SIM, EXCLUIR PERMANENTEMENTE", key="final_delete_tipo_sim"):
                # Assumindo que deletar_registro_dimensao est√° definida
                if deletar_registro_dimensao("dim_tipotransacao", "id_tipotransacao", id_del):
                    st.success(f"Tipo ID {id_del} exclu√≠do com sucesso.")
                    st.session_state.confirm_delete_id_tipo = None
                    st.rerun()
        with col_conf_nao:
            if st.button("CANCELAR Exclus√£o", key="final_delete_tipo_nao"):
                st.session_state.confirm_delete_id_tipo = None
                st.rerun()

def formulario_categoria():
    st.header("Cadastro e Manuten√ß√£o de Categorias")

    # 1. Busca os dados de Tipo de Transa√ß√£o para os dropdowns (dim_tipotransacao)
    # NOTE: O nome da tabela √© em min√∫sculo
    df_tipos = consultar_dados("dim_tipotransacao")
    
    if df_tipos.empty:
        st.warning("√â necess√°rio cadastrar pelo menos um Tipo de Transa√ß√£o (Receita/Despesa) antes de cadastrar Categorias.")
        return
        
    # Mapeamento do Tipo (Nome -> ID). Colunas do DataFrame s√£o lidas em min√∫sculo.
    tipos_dict = dict(zip(df_tipos['dsc_tipotransacao'], df_tipos['id_tipotransacao']))
    tipos_nomes = list(tipos_dict.keys())

    # ----------------------------------------------------
    # A) CADASTRO 
    # ----------------------------------------------------
    st.subheader("1. Inserir Nova Categoria")
    
    with st.form("categoria_form"):
        # Campo de entrada
        tipo_selecionado = st.selectbox(
            "Selecione o Tipo de Transa√ß√£o Pai:",
            tipos_nomes
        )
        descricao = st.text_input("Descri√ß√£o da Categoria (ex: Alimenta√ß√£o, Resid√™ncia)")
        
        submitted = st.form_submit_button("Inserir Nova Categoria")
        
        if submitted:
            if descricao:
                id_tipo = tipos_dict[tipo_selecionado]
                
                # Inser√ß√£o na tabela dim_categoria
                # Nomes de tabelas e campos em min√∫sculo
                inserir_dados(
                    tabela="dim_categoria",
                    dados=(id_tipo, descricao,),
                    campos=("id_tipotransacao", "dsc_categoriatransacao") 
                )
            else:
                st.warning("A Descri√ß√£o e o Tipo de Transa√ß√£o s√£o obrigat√≥rios.")

    # ----------------------------------------------------
    # B) VISUALIZA√á√ÉO E SELE√á√ÉO MANUAL (EDI√á√ÉO/EXCLUS√ÉO)
    # ----------------------------------------------------
    st.markdown("---")
    st.subheader("2. Editar ou Excluir Registros Existentes")
    
    # USANDO A VIEW INFORMADA PELO USU√ÅRIO (vw_dim_categoria)
    df_categorias = consultar_dados("vw_dim_categoria") 
    
    if df_categorias.empty:
        st.info("Nenhuma categoria registrada.")
        return

    # ----------------------------------------------------------------------
    # CORRE√á√ÉO CR√çTICA DO KEYERROR: As chaves do dicion√°rio s√£o em min√∫sculo
    # ----------------------------------------------------------------------
    df_exibicao = df_categorias.rename(columns={
        'id': 'ID',                         # Coluna do DF: 'id' -> Exibi√ß√£o: 'ID'
        'categoria': 'Descri√ß√£o',           # Coluna do DF: 'categoria' -> Exibi√ß√£o: 'Descri√ß√£o'
        'tipodetransacao': 'Tipo Pai',      # Coluna do DF: 'tipodetransacao' -> Exibi√ß√£o: 'Tipo Pai'
        'datacriacao': 'DataCriacao'        # Inclui a coluna de data (min√∫scula -> mai√∫scula)
    })[['ID', 'Descri√ß√£o', 'Tipo Pai']] 

    # Exibe a tabela completa para refer√™ncia
    st.dataframe(df_exibicao, hide_index=True, use_container_width=True)
    
    # --- SELE√á√ÉO MANUAL DO ID ---
    lista_ids = [''] + df_exibicao['ID'].astype(str).tolist()
    id_selecionado_str = st.selectbox(
        "Selecione o ID da Categoria para Editar/Excluir:", 
        options=lista_ids, 
        key="categoria_id_selector" 
    )
    
    id_selecionado = None
    
    if id_selecionado_str and id_selecionado_str != '':
        try:
            id_selecionado = int(id_selecionado_str)
            
            # Busca os dados do ID selecionado
            dados_selecionados = df_exibicao[df_exibicao['ID'] == id_selecionado].iloc[0]
            descricao_atual = dados_selecionados['Descri√ß√£o']
            tipo_pai_atual = dados_selecionados['Tipo Pai']
            
            st.markdown(f"#### Manuten√ß√£o da Categoria: ID {id_selecionado} - {descricao_atual}")
            
            # --- BLOC DA EDI√á√ÉO ---
            with st.form("edicao_categoria_form"):
                
                # Permite mudar o Tipo Pai
                novo_tipo_pai = st.selectbox(
                    "Mudar Tipo de Transa√ß√£o Pai:", 
                    tipos_nomes,
                    index=tipos_nomes.index(tipo_pai_atual)
                )
                novo_descricao = st.text_input("Nova Descri√ß√£o:", value=descricao_atual)
                
                # Bot√µes de A√ß√£o
                col_edit, col_delete = st.columns([1, 1])
                
                with col_edit:
                    edit_submitted = st.form_submit_button("Salvar Edi√ß√£o", type="secondary")
                with col_delete:
                    delete_clicked = st.form_submit_button("üî¥ Excluir Registro", type="primary")

                if edit_submitted:
                    id_novo_tipo = tipos_dict[novo_tipo_pai]
                    id_tipo_pai_atual = tipos_dict[tipo_pai_atual]
                    
                    # Verifica se houve altera√ß√£o
                    if novo_descricao != descricao_atual or id_novo_tipo != id_tipo_pai_atual:
                        
                        # Campos para o UPDATE
                        campos_valores = {
                            "id_tipotransacao": id_novo_tipo, 
                            "dsc_categoriatransacao": novo_descricao
                        }
                        
                        if atualizar_registro_dimensao("dim_categoria", "id_categoria", id_selecionado, campos_valores):
                            st.success(f"Categoria ID {id_selecionado} atualizada com sucesso.")
                            st.rerun()
                    else:
                        st.info("Nenhuma altera√ß√£o detectada para salvar.")
                
                if delete_clicked:
                    st.session_state.confirm_delete_id_cat = id_selecionado
                    st.session_state.confirm_delete_nome_cat = descricao_atual
                    st.rerun() 
            # --- FIM BLOC DA EDI√á√ÉO ---

        except Exception as e:
            st.error(f"Erro ao carregar dados do ID. Detalhe: {e}")
            
    
    # --- L√ìGICA DE CONFIRMA√á√ÉO DE EXCLUS√ÉO ---
    if st.session_state.get('confirm_delete_id_cat'):
        id_del = st.session_state.confirm_delete_id_cat
        nome_del = st.session_state.confirm_delete_nome_cat
        
        st.markdown("---")
        st.error(f"‚ö†Ô∏è CONFIRMA√á√ÉO DE EXCLUS√ÉO: Tem certeza que deseja EXCLUIR a Categoria '{nome_del}' (ID {id_del})? Esta a√ß√£o √© irrevers√≠vel e impedir√° a exclus√£o se houver Subcategorias ou Transa√ß√µes vinculadas.")
        
        col_conf_sim, col_conf_nao = st.columns(2)
        
        with col_conf_sim:
            if st.button("SIM, EXCLUIR PERMANENTEMENTE", key="final_delete_cat_sim"):
                # O nome da tabela e da coluna ID s√£o passados em min√∫sculo
                if deletar_registro_dimensao("dim_categoria", "id_categoria", id_del):
                    st.success(f"Categoria ID {id_del} exclu√≠da com sucesso.")
                    st.session_state.confirm_delete_id_cat = None
                    st.rerun()
        with col_conf_nao:
            if st.button("CANCELAR Exclus√£o", key="final_delete_cat_nao"):
                st.session_state.confirm_delete_id_cat = None
                st.rerun()

def formulario_subcategoria():
    st.header("Cadastro e Manuten√ß√£o de Subcategorias")

    # 1. Busca os dados de Categoria para os dropdowns (dim_categoria)
    df_categorias = consultar_dados("dim_categoria")
    
    if df_categorias.empty:
        st.warning("√â necess√°rio cadastrar pelo menos uma Categoria antes de cadastrar Subcategorias.")
        return
        
    # Mapeamento da Categoria (Nome -> ID).
    categorias_dict = dict(zip(df_categorias['dsc_categoriatransacao'], df_categorias['id_categoria']))
    categorias_nomes = list(categorias_dict.keys())

    # ----------------------------------------------------
    # A) CADASTRO 
    # ----------------------------------------------------
    st.subheader("1. Inserir Nova Subcategoria")
    
    with st.form("subcategoria_form"):
        # Campo de entrada
        categoria_selecionada = st.selectbox(
            "Selecione a Categoria Pai:",
            categorias_nomes
        )
        # Coluna de descri√ß√£o no DB: dsc_subcategoriatransacao
        descricao = st.text_input("Descri√ß√£o da Subcategoria (ex: Aluguel, Internet)")
        
        submitted = st.form_submit_button("Inserir Nova Subcategoria")
        
        if submitted:
            if descricao:
                id_categoria = categorias_dict[categoria_selecionada]
                
                # Inser√ß√£o na tabela dim_subcategoria
                inserir_dados(
                    tabela="dim_subcategoria",
                    dados=(id_categoria, descricao,),
                    campos=("id_categoria", "dsc_subcategoriatransacao") 
                )
            else:
                st.warning("A Descri√ß√£o e a Categoria s√£o obrigat√≥rias.")

    # ----------------------------------------------------
    # B) VISUALIZA√á√ÉO E SELE√á√ÉO MANUAL (EDI√á√ÉO/EXCLUS√ÉO)
    # ----------------------------------------------------
    st.markdown("---")
    st.subheader("2. Editar ou Excluir Registros Existentes")
    
    # *** USANDO A VIEW INFORMADA PELO USU√ÅRIO (vw_dim_subcategoria) ***
    df_subcategorias = consultar_dados("vw_dim_subcategoria") 
    
    if df_subcategorias.empty:
        st.info("Nenhuma subcategoria registrada.")
        return

    # *** CORRE√á√ÉO DO KEY ERROR: Mapeando chaves em min√∫sculo ***
    df_exibicao = df_subcategorias.rename(columns={
        'id': 'ID',                         # Mapeia 'id' (min√∫sculo)
        'subcategoria': 'Descri√ß√£o',        # Mapeia 'subcategoria' (min√∫sculo)
        'categoria': 'Categoria Pai',       # Mapeia 'categoria' (min√∫sculo)
        'datacriacao': 'DataCriacao'        # Coluna de data
    })[['ID', 'Descri√ß√£o', 'Categoria Pai']] # Sele√ß√£o final usa os nomes de exibi√ß√£o
    
    # Exibe a tabela completa para refer√™ncia
    st.dataframe(df_exibicao, hide_index=True, use_container_width=True)
    
    # --- SELE√á√ÉO MANUAL DO ID ---
    lista_ids = [''] + df_exibicao['ID'].astype(str).tolist()
    id_selecionado_str = st.selectbox(
        "Selecione o ID da Subcategoria para Editar/Excluir:", 
        options=lista_ids, 
        key="subcategoria_id_selector" 
    )
    
    id_selecionado = None
    
    if id_selecionado_str and id_selecionado_str != '':
        try:
            id_selecionado = int(id_selecionado_str)
            
            # Busca os dados do ID selecionado
            dados_selecionados = df_exibicao[df_exibicao['ID'] == id_selecionado].iloc[0]
            descricao_atual = dados_selecionados['Descri√ß√£o']
            categoria_pai_atual = dados_selecionados['Categoria Pai']
            
            st.markdown(f"#### Manuten√ß√£o da Subcategoria: ID {id_selecionado} - {descricao_atual}")
            
            # --- BLOC DA EDI√á√ÉO ---
            with st.form("edicao_subcategoria_form"):
                
                # Permite mudar a Categoria Pai
                novo_categoria_pai = st.selectbox(
                    "Mudar Categoria Pai:", 
                    categorias_nomes,
                    index=categorias_nomes.index(categoria_pai_atual)
                )
                novo_descricao = st.text_input("Nova Descri√ß√£o:", value=descricao_atual)
                
                # Bot√µes de A√ß√£o
                col_edit, col_delete = st.columns([1, 1])
                
                with col_edit:
                    edit_submitted = st.form_submit_button("Salvar Edi√ß√£o", type="secondary")
                with col_delete:
                    delete_clicked = st.form_submit_button("üî¥ Excluir Registro", type="primary")

                if edit_submitted:
                    id_nova_categoria = categorias_dict[novo_categoria_pai]
                    
                    # Busca o ID da Categoria Pai atual 
                    id_categoria_pai_atual = categorias_dict[categoria_pai_atual]
                    
                    # Verifica se houve altera√ß√£o
                    if novo_descricao != descricao_atual or id_nova_categoria != id_categoria_pai_atual:
                        
                        # Campos para o UPDATE
                        campos_valores = {
                            "id_categoria": id_nova_categoria, # Atualiza o ID da Categoria
                            "dsc_subcategoriatransacao": novo_descricao
                        }
                        
                        if atualizar_registro_dimensao("dim_subcategoria", "id_subcategoria", id_selecionado, campos_valores):
                            st.success(f"Subcategoria ID {id_selecionado} atualizada com sucesso.")
                            st.rerun()
                    else:
                        st.info("Nenhuma altera√ß√£o detectada para salvar.")
                
                if delete_clicked:
                    st.session_state.confirm_delete_id_sub = id_selecionado
                    st.session_state.confirm_delete_nome_sub = descricao_atual
                    st.rerun() 
            # --- FIM BLOC DA EDI√á√ÉO ---

        except Exception as e:
            st.error(f"Erro ao carregar dados do ID. Verifique se o ID existe ou se os nomes das colunas da View est√£o corretos: {e}")
            
    
    # --- L√ìGICA DE CONFIRMA√á√ÉO DE EXCLUS√ÉO ---
    if st.session_state.get('confirm_delete_id_sub'):
        id_del = st.session_state.confirm_delete_id_sub
        nome_del = st.session_state.confirm_delete_nome_sub
        
        st.markdown("---")
        st.error(f"‚ö†Ô∏è CONFIRMA√á√ÉO DE EXCLUS√ÉO: Tem certeza que deseja EXCLUIR a Subcategoria '{nome_del}' (ID {id_del})? Esta a√ß√£o √© irrevers√≠vel.")
        
        col_conf_sim, col_conf_nao = st.columns(2)
        
        with col_conf_sim:
            if st.button("SIM, EXCLUIR PERMANENTEMENTE", key="final_delete_sub_sim"):
                # O deletar_registro_dimensao j√° lida com o erro de Foreign Key
                if deletar_registro_dimensao("dim_subcategoria", "id_subcategoria", id_del):
                    st.success(f"Subcategoria ID {id_del} exclu√≠da com sucesso.")
                    st.session_state.confirm_delete_id_sub = None
                    st.rerun()
        with col_conf_nao:
            if st.button("CANCELAR Exclus√£o", key="final_delete_sub_nao"):
                st.session_state.confirm_delete_id_sub = None
                st.rerun()

def formulario_usuario():
    st.header("Cadastro de Usu√°rio")
    
    with st.form("usuario_form"):
        # Campo de entrada
        nome = st.text_input("Nome do Usu√°rio:")
        
        submitted = st.form_submit_button("Inserir Usu√°rio")
        
        if submitted:
            if nome:
                inserir_dados(
                    tabela="dim_usuario",
                    dados=(nome,),
                    campos=("dsc_nome",) # Coluna original
                )
            else:
                st.warning("O campo Nome √© obrigat√≥rio.")

    # Exibe a tabela usando a View (nomes amig√°veis: ID, Nome)
    st.subheader("Registros Existentes")
    df_usuarios = consultar_dados("dim_usuario")
    st.dataframe(df_usuarios, use_container_width=True)

def formulario_salario():
    st.header("Registro de Sal√°rio")

    # 1. Consulta o Usu√°rio para o Dropdown
    try:
        # CORRE√á√ÉO: Argumento 'usar_view=False' REMOVIDO
        df_usuarios = consultar_dados("dim_usuario")
    except Exception:
        df_usuarios = pd.DataFrame(columns=['id_usuario', 'dsc_nome'])

    if df_usuarios.empty:
        st.warning("Primeiro, cadastre pelo menos um Usu√°rio na aba 'Usu√°rio'.")
        # Removido o check 'consultar_dados' no globals, pois ele deve ser uma importa√ß√£o garantida.
        return

    # Mapeamento do Usu√°rio (Nome -> ID)
    usuarios_dict = dict(zip(df_usuarios['dsc_nome'], df_usuarios['id_usuario']))
    usuarios_nomes = list(usuarios_dict.keys())
    
    # ------------------ BLOC FORMUL√ÅRIO ------------------
    with st.form("salario_form"):
        # Campos do Formul√°rio
        usuario_selecionado_nome = st.selectbox(
            "Selecione o Usu√°rio:",
            usuarios_nomes
        )
        valor_salario = st.number_input("Valor Recebido (Ex: 3500.00)", min_value=0.01, format="%.2f")
        data_recebimento = st.date_input("Data de Recebimento:", datetime.date.today())
        observacao = st.text_area("Observa√ß√£o (Ex: Sal√°rio m√™s X):", max_chars=255)
        
        submitted = st.form_submit_button("Registrar Sal√°rio")
        
        if submitted:
            if valor_salario > 0:
                id_usuario = usuarios_dict[usuario_selecionado_nome]
                
                # --- FUN√á√ÉO DE INSER√á√ÉO ---
                # Esta fun√ß√£o deve estar definida no seu main.py
                # Ex: inserir_dados(tabela, dados, campos)
                # -------------------------
                inserir_dados(
                    tabela="fact_salario", 
                    dados=(id_usuario, valor_salario, data_recebimento, observacao),
                    campos=("id_usuario", "vl_salario", "dt_recebimento", "dsc_observacao")
                )
                # --------------------------------------------------------
                
                st.success(f"Sal√°rio de R${valor_salario:.2f} registrado para {usuario_selecionado_nome}!")
            else:
                st.warning("O Valor do Sal√°rio deve ser maior que zero.")
    # ------------------ FIM FORMUL√ÅRIO ------------------


    # Exibe a tabela com as colunas ajustadas, usando a View
    st.subheader("Sal√°rios Registrados")
    
    # 1. Consulta a View que j√° tem o Nome do Usu√°rio, Ano e M√™s
    # CORRE√á√ÉO: Argumento 'usar_view=True' REMOVIDO
    df_salarios = consultar_dados("vw_fact_salarios") 

    if not df_salarios.empty:
        
        # 2. Fun√ß√£o de Formata√ß√£o (deve ser definida no escopo global ou localmente)
        def formatar_moeda(x):
            return f"{x:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
        
        # 3. Renomea√ß√£o das Colunas para Exibi√ß√£o
        df_exibicao = df_salarios.rename(columns={
            'nomeusuario': 'Usu√°rio', 
            'vl_salario': 'Valor do Sal√°rio',
            'dsc_observacao': 'Descri√ß√£o do Sal√°rio',
        })
        
        # 4. Sele√ß√£o das Colunas Finais
        colunas_finais = [
            "id_salario",
            "Usu√°rio", 
            "Valor do Sal√°rio",
            "dt_recebimento",
            "Descri√ß√£o do Sal√°rio",
            "ano",
            "mes"
        ]

        # 5. Aplica a Formata√ß√£o de Moeda
        # Streamlit exibe melhor formata√ß√£o nativa se o tipo for float.
        # Se precisar de formata√ß√£o espec√≠fica (R$ X.XXX,XX), use st.dataframe.
        df_exibicao['Valor do Sal√°rio'] = df_exibicao['Valor do Sal√°rio'].apply(formatar_moeda) 
        
        # 6. Exibe o DataFrame com os nomes de colunas corretos
        st.dataframe(df_exibicao[colunas_finais], hide_index=True, use_container_width=True)

    else:
        st.info("Nenhum sal√°rio registrado.")

def reset_categoria():
    """Reseta a Categoria e Subcategoria ao mudar o Tipo de Transa√ß√£o."""
    # Define a chave de Categoria para o primeiro valor (index=0)
    # A Subcategoria √© implicitamente reajustada no pr√≥ximo re-run.
    if 'sel_cat' in st.session_state:
        st.session_state.sel_cat = None
    if 'sel_sub' in st.session_state:
        st.session_state.sel_sub = None

def formulario_transacao():
    st.header("Registro de Transa√ß√£o")
    
    # 1. CARREGAR DADOS DAS DIMENS√ïES
    df_tipos = consultar_dados("dim_tipotransacao")
    df_categorias = consultar_dados("dim_categoria")
    df_subcategorias = consultar_dados("dim_subcategoria")
    df_usuarios = consultar_dados("dim_usuario") 

    # --- DADOS DO USU√ÅRIO LOGADO (VINCULA√á√ÉO AUTOM√ÅTICA) ---
    try:
        id_usuario_logado = st.session_state.id_usuario_logado
        # Usamos o nome completo (dsc_nome) para exibi√ß√£o e registro na tabela
        nome_usuario = st.session_state.nome_completo # <<--- ALTERA√á√ÉO PRINCIPAL AQUI
        
    except AttributeError:
        st.error("Erro de Sess√£o: As vari√°veis de usu√°rio logado (id_usuario_logado e nome_completo) n√£o est√£o configuradas na sess√£o.")
        return
    
    # CR√çTICO: ALTERA√á√ÉO NA EXIBI√á√ÉO PARA USAR O NOME COMPLETO
    #st.info(f"Usu√°rio (Quem Registrou) **automaticamente** definido como: **{nome_usuario}**")
    # --------------------------------------------------------

    # Valida√ß√£o M√≠nima
    if df_tipos.empty or df_categorias.empty or df_subcategorias.empty or df_usuarios.empty:
        st.warning("√â necess√°rio cadastrar: Usu√°rios, Tipos, Categorias e Subcategorias. Verifique as tabelas de dimens√µes.")
        return

    # Mapeamentos
    tipos_map = dict(zip(df_tipos['dsc_tipotransacao'], df_tipos['id_tipotransacao']))
    usuarios_nomes = df_usuarios['dsc_nome'].tolist()
    tipos_nomes = list(tipos_map.keys())
    
    # ----------------------------------------
    # LINHA 1: DATA, TIPO 
    # ----------------------------------------
    col1, col2 = st.columns(2) 
    with col1:
        data_transacao = st.date_input("Data da Transa√ß√£o:", datetime.date.today())
    with col2:
        tipo_nome = st.selectbox(
            "Tipo de Transa√ß√£o:", 
            tipos_nomes, 
            key="sel_tipo", 
            # on_change=reset_categoria 
        )
    
    # --- LOGICA DE FILTRAGEM DE CATEGORIAS ---
    id_tipo_selecionado = tipos_map.get(tipo_nome)
    if id_tipo_selecionado is not None:
        df_cats_filtradas = df_categorias[df_categorias['id_tipotransacao'] == id_tipo_selecionado].copy()
    else:
        df_cats_filtradas = pd.DataFrame()
        
    if df_cats_filtradas.empty:
        st.warning(f"N√£o h√° Categorias cadastradas para o Tipo '{tipo_nome}'. Cadastre uma Categoria.")
        categorias_nomes = ["(Cadastre uma Categoria)"]
    else:
        categorias_nomes = df_cats_filtradas['dsc_categoriatransacao'].tolist()

    col4, col5 = st.columns(2)
    with col4:
        categoria_nome = st.selectbox(
            "Categoria:", 
            categorias_nomes, 
            key="sel_cat",
            index=0
        )
        
    # --- LOGICA DE FILTRAGEM DE SUBCATEGORIAS ---
    df_subs_filtradas = pd.DataFrame()
    subcategorias_nomes = ["(Selecione uma Categoria v√°lida)"]
    
    if categoria_nome != "(Cadastre uma Categoria)" and categoria_nome in df_cats_filtradas['dsc_categoriatransacao'].values:
        
        id_categoria_selecionada = df_cats_filtradas[df_cats_filtradas['dsc_categoriatransacao'] == categoria_nome]['id_categoria'].iloc[0]
        df_subs_filtradas = df_subcategorias[df_subcategorias['id_categoria'] == id_categoria_selecionada].copy()
        
        if df_subs_filtradas.empty:
            st.warning(f"N√£o h√° Subcategorias cadastradas para a Categoria '{categoria_nome}'. Cadastre uma Subcategoria.")
            subcategorias_nomes = ["(Cadastre uma Subcategoria)"]
        else:
            subcategorias_nomes = df_subs_filtradas['dsc_subcategoriatransacao'].tolist()

    with col5:
        subcategoria_nome = st.selectbox("Subcategoria:", subcategorias_nomes, key="sel_sub", index=0)
    
    # ----------------------------------------
    # LINHA 3 & 4: VALOR, DESCRI√á√ÉO, CONTROLE
    # ----------------------------------------
    
    valor_transacao = st.number_input("Valor da Transa√ß√£o:", min_value=0.01, format="%.2f")
    descricao = st.text_area("Descri√ß√£o Detalhada:", max_chars=100)
    
    st.subheader("Controle de Pagamento")
    col6, col7, col8 = st.columns(3)
    
    with col6:
        quem_pagou = st.selectbox("Quem Pagou:", usuarios_nomes, key="sel_quem_pagou") 
    with col7:
        e_dividido = st.radio(
            "Essa transa√ß√£o ser√° dividida?", 
            ('N√£o', 'Sim'), 
            horizontal=True, 
            index=0
        )
    with col8:
        foi_dividido = st.radio(
            "A transa√ß√£o foi acertada/saldada?", 
            ('N√£o', 'Sim'), 
            horizontal=True, 
            index=0
        )

    # ----------------------------------------
    # SUBMIT
    # ----------------------------------------
    
    submitted = st.button("Registrar Transa√ß√£o")
    
    if submitted:
        # Mapeamento
        cd_e_dividido_bd = 'S' if e_dividido == 'Sim' else 'N'
        cd_foi_dividido_bd = 'S' if foi_dividido == 'Sim' else 'N'

        is_valid_category = categoria_nome not in ["(Cadastre uma Categoria)", "(Selecione uma Categoria v√°lida)"]
        is_valid_subcategory = subcategoria_nome not in ["(Cadastre uma Subcategoria)", "(Selecione uma Categoria v√°lida)"]

        if valor_transacao > 0 and descricao and quem_pagou and is_valid_category and is_valid_subcategory:
            
            # --- USO DOS DADOS VINCULADOS ---
            id_usuario_final = id_usuario_logado
            usuario_nome_final = nome_usuario # <--- NOME COMPLETO USADO NO REGISTRO
            # -------------------------------
            
            id_tipo = int(tipos_map[tipo_nome])
            
            id_categoria_final = int(df_cats_filtradas[df_cats_filtradas['dsc_categoriatransacao'] == categoria_nome]['id_categoria'].iloc[0])
            id_subcategoria_final = int(df_subs_filtradas[df_subs_filtradas['dsc_subcategoriatransacao'] == subcategoria_nome]['id_subcategoria'].iloc[0])
            
            dados = (data_transacao, id_tipo, tipo_nome, id_categoria_final, categoria_nome, 
                     id_subcategoria_final, subcategoria_nome, id_usuario_final, usuario_nome_final, 
                     descricao, valor_transacao, quem_pagou, cd_e_dividido_bd, cd_foi_dividido_bd)
            
            campos = ("dt_datatransacao", "id_tipotransacao", "dsc_tipotransacao", "id_categoria", "dsc_categoriatransacao", 
                      "id_subcategoria", "dsc_subcategoriatransacao", "id_usuario", "dsc_nomeusuario",
                      "dsc_transacao", "vl_transacao", "cd_quempagou", "cd_edividido", "cd_foidividido") 
            
            # A fun√ß√£o inserir_dados deve estar definida
            inserir_dados(tabela="stg_transacoes", dados=dados, campos=campos)
            st.success(f"Transa√ß√£o '{descricao}' registrada com sucesso por {usuario_nome_final}!")
        else:
            st.warning("Verifique se o Valor, Descri√ß√£o e Categorias/Subcategorias v√°lidas foram selecionadas.")

    st.subheader("Transa√ß√µes em Staging")
    df_stg = consultar_dados("vw_stg_transacoes") 
    st.dataframe(df_stg, use_container_width=True)

def exibir_detalhe_rateio():
    st.header("An√°lise de Acerto de Contas")
    
    # -------------------------------------------------------------
    # 1. TABELA RESUMO TOTAL: Quem Deve e o Valor (vw_acertototal)
    # -------------------------------------------------------------
    st.subheader("Saldo Total Pendente")

    df_total = consultar_dados("vw_acertototal")

    if df_total.empty:
        st.info("Nenhuma transa√ß√£o para rateio pendente.")
        return # Se n√£o houver dados, para a execu√ß√£o aqui

    # Renomea√ß√£o do Resumo Total
    df_total.rename(columns={
        'nomeusuario': 'Usu√°rio',
        'vl_saldototal': 'Saldo Total'
    }, inplace=True)
    
    # Fun√ß√£o de estilo (reutilizando a l√≥gica de cor)
    def color_saldo(val):
        color = 'red' if val < 0 else 'green' if val > 0 else 'black'
        return f'color: {color}'

    # Exibi√ß√£o do Resumo Total (Usando .style.format para formatar sem o R$)
    st.dataframe(
        df_total.style.applymap(
            color_saldo, 
            subset=['Saldo Total'] 
        ).format({
            # Formata√ß√£o para xx.xxx,xx
            'Saldo Total': lambda x: f"{x:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
        }),
        use_container_width=True
    )

    st.markdown("---")

    # ----------------------------------------------------------------------
    # 2. TABELA CONSOLIDADO MENSAL (vw_acertomensal)
    # ----------------------------------------------------------------------
    st.subheader("Saldo Consolidado Mensal")
    df_resumo = consultar_dados("vw_acertomensal")

    if df_resumo.empty:
        st.info("Nenhuma transa√ß√£o para rateio pendente. Cadastre uma transa√ß√£o dividida ou marque as transa√ß√µes antigas como saldadas.")
        return

    # Renomea√ß√£o do Resumo
    df_resumo.rename(columns={
        'cd_quemdeve': 'Usu√°rio',
        'ano' : 'Ano',
        'mes' : 'M√™s',
        'vl_saldoacertomensal': 'Saldo L√≠quido'
    }, inplace=True)

    # üí° INCLUS√ÉO AQUI: Ordena o DataFrame por Ano (ASC) e M√™s (ASC)
    df_resumo.sort_values(by=['Ano', 'M√™s'], inplace=True)

    # Fun√ß√£o de estilo para o Resumo (CORRIGIDO A SINTAXE E ESPERA O VALOR NUM√âRICO)
    def color_saldo_resumo(val):
        # Garante que val √© um n√∫mero
        if isinstance(val, str):
            try:
                # Lida com o formato brasileiro para convers√£o
                val = float(val.replace('.', '').replace(',', '.'))
            except ValueError:
                val = 0
                
        color = 'red' if val < 0 else 'green' if val > 0 else 'black'
        return f'color: {color}'

    # Exibi√ß√£o do Resumo (Usando .style.format para formatar sem o R$)
    st.dataframe(
        df_resumo.style.applymap(
            color_saldo_resumo, 
            subset=['Saldo L√≠quido'] # Aplica a cor na coluna num√©rica
        ).format({
        # üí° CORRE√á√ÉO 1: Formata 'Ano' como inteiro (sem decimais)
        'Ano': "{:.0f}",
        # üí° CORRE√á√ÉO 2: Formata 'M√™s' como inteiro (sem decimais)
        'M√™s': "{:.0f}", 
        # Formata√ß√£o para xx.xxx,xx
        'Saldo L√≠quido': lambda x: f"{x:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
        }),
        column_order=['Ano', 'M√™s', 'Usu√°rio', 'Saldo L√≠quido'],
        use_container_width=True
    )

    st.markdown("---")

    # ----------------------------------------------------------------------
    # 3. TABELA DETALHE: Detalhe por Transa√ß√£o (vw_AcertoTransacao)
    # ----------------------------------------------------------------------
    st.subheader("Detalhe das Transa√ß√µes Pendentes de Acerto")
    
    # Usando o nome da View que voc√™ indicou: vw_acertodetalhe
    df_detalhe = consultar_dados("vw_acertodetalhe") 

    # Renomea√ß√£o do Detalhe
    df_detalhe.rename(columns={
        'dt_datatransacao': 'Data',
        'dsc_transacao': 'Descri√ß√£o',
        'vl_totaltransacao': 'Total da Transa√ß√£o',
        'cd_quempagou': 'Pagador',
        'cd_quemdeve': 'Usu√°rio',
        'vl_proporcional': 'Devido (Parte Dele)',
        'vl_acertotransacao': 'Acerto L√≠quido'
    }, inplace=True)
    
    # Fun√ß√£o de estilo para o Detalhe
    def color_acerto_detalhe(val):
        # A fun√ß√£o de cor agora recebe o valor num√©rico
        if isinstance(val, str):
            try:
                val = float(val.replace('.', '').replace(',', '.'))
            except ValueError:
                val = 0
                
        color = 'red' if val < 0 else 'green' if val > 0 else 'black'
        return f'color: {color}'

    # Exibi√ß√£o do Detalhe (Usando .style.format para aplicar formata√ß√£o e cor)
    st.dataframe(
        df_detalhe.style.applymap(
            color_acerto_detalhe, 
            subset=['Acerto L√≠quido']
        ).format({
            # Formata√ß√£o de moeda para todas as colunas de valor
            'Total da Transa√ß√£o': lambda x: f"{x:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."),
            'Devido (Parte Dele)': lambda x: f"{x:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."),
            'Acerto L√≠quido': lambda x: f"{x:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
        }),
        use_container_width=True
    )

def buscar_transacao_por_id(id_transacao):
    conn = None
    transacao = None
    
    # 1. Tabela stg_transacoes em min√∫sculo
    tabela = 'stg_transacoes'
    
    # 2. Uso do placeholder %s para PostgreSQL
    sql_query = f"""
        SELECT * FROM {tabela} 
        WHERE id_transacao = %s
    """
    
    try:
        conn = get_connection()
        cursor = conn.cursor()
        
        # 3. Execu√ß√£o: Passa a ID como uma tupla
        cursor.execute(sql_query, (id_transacao,)) 
        
        # 4. Busca o primeiro (e √∫nico) resultado
        transacao = cursor.fetchone()
        
    except psycopg2.Error as ex: # <<< CORRE√á√ÉO DO DRIVER
        st.error(f"Erro ao buscar transa√ß√£o por ID: {ex}")
        
    except Exception as e:
        st.error(f"Erro inesperado: {e}")

    finally:
        if conn:
            conn.close()
            
    return transacao

def atualizar_transacao_por_id(
    id_transacao, 
    dt_datatransacao, 
    id_tipotransacao, 
    dsc_tipotransacao, 
    id_categoria, 
    dsc_categoriatransacao, 
    id_subcategoria, 
    dsc_subcategoriatransacao, 
    id_usuario, 
    dsc_nomeusuario, 
    dsc_transacao, 
    vl_transacao, 
    cd_quempagou, 
    cd_edividido, 
    cd_foidividido
):
    conn = None
    
    # Tabela em min√∫sculo
    tabela = 'stg_transacoes'
    
    # Ajuste do SQL: Nomes de colunas em min√∫sculo e placeholders %s
    sql_update = f"""
        UPDATE {tabela} SET
            dt_datatransacao = %s,
            id_tipotransacao = %s,
            dsc_tipotransacao = %s,
            id_categoria = %s,
            dsc_categoriatransacao = %s,
            id_subcategoria = %s,
            dsc_subcategoriatransacao = %s,
            id_usuario = %s,
            dsc_nomeusuario = %s,
            dsc_transacao = %s,
            vl_transacao = %s,
            cd_quempagou = %s,
            cd_edividido = %s,
            cd_foidividido = %s
        WHERE id_transacao = %s; 
    """
    
    # Tupla de Valores: Inclui todos os campos na ordem do SQL, 
    # e o ID no final para a condi√ß√£o WHERE
    valores = (
        dt_datatransacao, 
        id_tipotransacao, 
        dsc_tipotransacao, 
        id_categoria, 
        dsc_categoriatransacao, 
        id_subcategoria, 
        dsc_subcategoriatransacao, 
        id_usuario, 
        dsc_nomeusuario, 
        dsc_transacao, 
        vl_transacao, 
        cd_quempagou, 
        cd_edividido, 
        cd_foidividido,
        id_transacao # <<< O valor do WHERE (o √∫ltimo %s)
    )

    try:
        conn = get_connection()
        cursor = conn.cursor()
        
        # Execu√ß√£o: Passa o SQL e a tupla de valores
        cursor.execute(sql_update, valores)
        conn.commit()
        return True
        
    except psycopg2.Error as ex: # <<< CORRE√á√ÉO DO DRIVER
        st.error(f"Erro do banco de dados ao atualizar transa√ß√£o: {ex}")
        if conn: conn.rollback()
        return False
        
    except Exception as e:
        st.error(f"Erro inesperado ao atualizar transa√ß√£o: {e}")
        if conn: conn.rollback()
        return False

    finally:
        if conn: conn.close()

def exibir_formulario_edicao(id_transacao):
    st.subheader(f"2. Editando Transa√ß√£o ID: {id_transacao}")

    # 1. BUSCAR DADOS ATUAIS DA TRANSA√á√ÉO
    dados_atuais = buscar_transacao_por_id(id_transacao)
    
    if not dados_atuais:
        st.error("N√£o foi poss√≠vel carregar os dados desta transa√ß√£o.")
        return
    
    # 2. BUSCAR DADOS PARA OS DROPDOWNS (DIMENS√ïES)
    
    # Usu√°rios (dim_usuario) - Para o dropdown "Quem Pagou"
    df_usuarios = consultar_dados("dim_usuario", usar_view=False)
    usuarios_nomes = df_usuarios['dsc_nome'].tolist() if not df_usuarios.empty and 'dsc_nome' in df_usuarios.columns else []
    
    # Categorias (dim_categoria) - CORRIGIDO: USANDO dsc_categoriatransacao
    df_categorias = consultar_dados("dim_categoria", usar_view=False)
    categorias_nomes = df_categorias['dsc_categoriatransacao'].tolist() if not df_categorias.empty and 'dsc_categoriatransacao' in df_categorias.columns else []

    # Subcategorias (dim_subcategoria) - ASSUMINDO dsc_subcategoriatransacao
    df_subcategorias = consultar_dados("dim_subcategoria", usar_view=False)
    subcategorias_nomes = df_subcategorias['dsc_subcategoriatransacao'].tolist() if not df_subcategorias.empty and 'dsc_subcategoriatransacao' in df_subcategorias.columns else []
    
    
    # 3. PREPARAR VALORES PADR√ÉO
    
    # O dt_datatransacao √© retornado como objeto datetime
    data_atual_dt = dados_atuais['dt_datatransacao'].date() if isinstance(dados_atuais['dt_datatransacao'], datetime.datetime) else dados_atuais['dt_datatransacao']

    # O Tipo de Transa√ß√£o deve usar uma lista fixa (Receita/Despesa)
    tipos_transacao = ['Despesas', 'Receitas'] # Use a sua lista real
    
    # 4. FORMUL√ÅRIO PR√â-PREENCHIDO
    with st.form("edicao_transacao_form"):
        # LINHA 1: Data, Tipo, Usu√°rio (Quem Registrou)
        col1, col2, col3 = st.columns(3)
        
        with col1:
            nova_data = st.date_input("Data da Transa√ß√£o:", value=data_atual_dt)
            
        with col2:
            novo_tipo = st.selectbox("Tipo de Transa√ß√£o:", 
                                     tipos_transacao, 
                                     index=tipos_transacao.index(dados_atuais['dsc_tipotransacao']))

        with col3:
            # Usu√°rio que Registrou (cd_quemregistrou √© o campo que voc√™ deve ter)
            novo_usuario_registro = st.text_input("Usu√°rio (Quem Registrou):", value=dados_atuais.get('cd_quemregistrou', 'N√£o Informado'), disabled=True) 

        # LINHA 2: Categoria, Subcategoria, Valor
        col4, col5, col6 = st.columns(3)
        with col4:
            # Garante que a Categoria atual est√° na lista de op√ß√µes (fundamental para preenchimento)
            if dados_atuais['dsc_categoriatransacao'] not in categorias_nomes:
                 categorias_nomes.append(dados_atuais['dsc_categoriatransacao'])

            nova_categoria = st.selectbox("Categoria:", 
                                          categorias_nomes, 
                                          index=categorias_nomes.index(dados_atuais['dsc_categoriatransacao']))

        with col5:
            # Garante que a Subcategoria atual est√° na lista de op√ß√µes
            if dados_atuais['dsc_subcategoriatransacao'] not in subcategorias_nomes:
                 subcategorias_nomes.append(dados_atuais['dsc_subcategoriatransacao'])

            novo_subcategoria = st.selectbox("Subcategoria:", 
                                             subcategorias_nomes, 
                                             index=subcategorias_nomes.index(dados_atuais['dsc_subcategoriatransacao']))
            
        with col6:
            # CORRE√á√ÉO CR√çTICA: Converter o valor DECIMAL (do DB) para float, para evitar o StreamlitMixedNumericTypesError
            novo_valor = st.number_input("Valor da Transa√ß√£o:", value=float(dados_atuais['vl_transacao']), min_value=0.01, format="%.2f")
        
        # LINHA 3: Descri√ß√£o Detalhada
        nova_descricao = st.text_area("Descri√ß√£o Detalhada:", value=dados_atuais['dsc_transacao'])

        # LINHA 4: Controle de Pagamento
        st.markdown("##### Controle de Pagamento")
        col7, col8, col9 = st.columns(3)
        
        with col7:
            # Quem Pagou (usa a lista de Usu√°rios)
            if dados_atuais['cd_quempagou'] not in usuarios_nomes:
                 usuarios_nomes.append(dados_atuais['cd_quempagou'])

            novo_pagador = st.selectbox("Quem Pagou (Nome/Apelido):", 
                                         usuarios_nomes, 
                                         index=usuarios_nomes.index(dados_atuais['cd_quempagou']))

        with col8:
            # 'S' ou 'N'
            opcoes_divisao = ('N', 'S')
            novo_e_dividido = st.radio("Essa transa√ß√£o ser√° dividida?", 
                                       opcoes_divisao, 
                                       index=opcoes_divisao.index(dados_atuais['cd_edividido']), 
                                       horizontal=True)
        
        with col9:
            # 'S' ou 'N'
            opcoes_acerto = ('N', 'S')
            novo_foi_dividido = st.radio("A transa√ß√£o foi acertada/saldada?", 
                                         opcoes_acerto, 
                                         index=opcoes_acerto.index(dados_atuais['cd_foidividido']), 
                                         horizontal=True)

        submitted = st.form_submit_button("Salvar Corre√ß√£o")

        if submitted:
            # 5. CHAMADA DA FUN√á√ÉO DE ATUALIZA√á√ÉO SQL
            sucesso = atualizar_transacao_por_id(
                id_transacao, 
                novo_valor, 
                nova_data, 
                novo_tipo, 
                nova_categoria, 
                novo_subcategoria, 
                novo_pagador,
                nova_descricao,
                novo_e_dividido,
                novo_foi_dividido
            )
            
            if sucesso:
                st.success(f"Transa√ß√£o {id_transacao} atualizada com sucesso!")
                st.rerun() 
            else:
                st.error("Erro ao atualizar a transa√ß√£o. Verifique a conex√£o com o banco.")

def editar_transacao():
    st.header("Corre√ß√£o de Transa√ß√µes")

    # ----------------------------------------------------------------------
    # A) TABELA DE VISUALIZA√á√ÉO
    # ----------------------------------------------------------------------
    st.subheader("1. Tabela de Transa√ß√µes Registradas")

    # Consulta a tabela de transa√ß√µes (stg_transacoes j√° deve trazer 'dt_datatransacao')
    df_transacoes = consultar_dados("stg_transacoes")
    
    if df_transacoes.empty:
        st.info("Nenhuma transa√ß√£o registrada para editar.")
        return

    # üí° L√ìGICA DE FILTRO DE DATA (IN√çCIO)
    # 1. Calcula o primeiro dia do m√™s anterior
    hoje = datetime.date.today()
    primeiro_dia_mes_anterior = hoje - relativedelta(months=1)
    primeiro_dia_mes_anterior = primeiro_dia_mes_anterior.replace(day=1)
    
    # 2. Converte a coluna de data para datetime (se ainda n√£o for)
    # Garante que a coluna de data seja compar√°vel
    df_transacoes['dt_datatransacao'] = pd.to_datetime(df_transacoes['dt_datatransacao'])
    
    # 3. Filtra o DataFrame
    df_filtrado = df_transacoes[df_transacoes['dt_datatransacao'].dt.date >= primeiro_dia_mes_anterior]
    
    # Se o DataFrame filtrado estiver vazio
    if df_filtrado.empty:
        st.info(f"Nenhuma transa√ß√£o encontrada a partir de {primeiro_dia_mes_anterior.strftime('%d/%m/%Y')}.")
        return
    # üí° FIM DA L√ìGICA DE FILTRO
    
    # Renomea√ß√£o simplificada para o usu√°rio escolher (Usando o DF FILTRADO)
    df_exibicao = df_filtrado.rename(columns={
        'id_transacao': 'ID', # Mantenha o ID vis√≠vel e em primeiro
        'dt_datatransacao': 'Data',
        'dsc_transacao': 'Descri√ß√£o',
        'vl_transacao': 'Valor',
        'cd_quempagou': 'Pagador'
    })[['ID', 'Data', 'Descri√ß√£o', 'Valor', 'Pagador', 'cd_edividido', 'cd_foidividido']]

    # Exibe a tabela COMPLETA, apenas para visualiza√ß√£o (sem modo de sele√ß√£o)
    st.dataframe(
        df_exibicao, 
        hide_index=True, 
        use_container_width=True
    )
    
    st.markdown("---")
    
    # ----------------------------------------------------------------------
    # B) CAMPO DE SELE√á√ÉO MANUAL
    # ----------------------------------------------------------------------
    st.subheader("2. Insira o ID para Editar")
    
    # Lista de IDs dispon√≠veis para sele√ß√£o no campo (usando o DF FILTRADO)
    lista_ids = [''] + df_exibicao['ID'].astype(str).tolist()
    
    # Permite que o usu√°rio selecione o ID
    id_selecionado_str = st.selectbox(
        "Selecione o ID da transa√ß√£o que deseja corrigir na lista acima:",
        options=lista_ids,
        index=0 # Come√ßa com vazio
    )

    # ----------------------------------------------------------------------
    # C) L√ìGICA DE CARREGAMENTO DO FORMUL√ÅRIO
    # ----------------------------------------------------------------------
    
    if id_selecionado_str and id_selecionado_str != '':
        try:
            # Converte o ID para o tipo num√©rico (presumivelmente int, como no seu DB)
            id_transacao_selecionada = int(id_selecionado_str) 
            
            # Chama a fun√ß√£o para exibir o formul√°rio de edi√ß√£o
            exibir_formulario_edicao(id_transacao_selecionada)
        
        except ValueError:
            st.error("Erro: O ID selecionado n√£o √© um n√∫mero v√°lido.")
    else:
        st.info("O formul√°rio de edi√ß√£o aparecer√° aqui ap√≥s a sele√ß√£o do ID.")

def deletar_registro_dimensao(tabela, id_registro):
    conn = None
    
    # 1. Garante que o nome da tabela e as colunas est√£o em min√∫sculo
    tabela_lower = tabela.lower()
    
    # Sup√µe que a chave prim√°ria da dimens√£o √© 'id_' + nome_da_tabela
    # Ex: 'dim_usuario' -> 'id_usuario'
    id_coluna = f"id_{tabela_lower.split('_')[-1]}" 
    
    # 2. Uso do placeholder %s e inje√ß√£o do nome da tabela (seguro) e da coluna (constru√≠da)
    sql_delete = f"""
        DELETE FROM {tabela_lower}
        WHERE {id_coluna} = %s;
    """
    
    try:
        conn = get_connection()
        cursor = conn.cursor()
        
        # 3. Execu√ß√£o: Passa o ID como uma tupla
        cursor.execute(sql_delete, (id_registro,)) 
        
        conn.commit()
        return True
        
    except psycopg2.Error as ex: # <<< CORRE√á√ÉO DO DRIVER
        st.error(f"Erro do banco de dados ao deletar em {tabela_lower}: {ex}")
        if conn: conn.rollback()
        return False
        
    except Exception as e:
        st.error(f"Erro inesperado: {e}")
        if conn: conn.rollback()
        return False

    finally:
        if conn: conn.close()

def atualizar_registro_dimensao(tabela, campos, valores, id_registro):
    conn = None
    
    # 1. Garante que o nome da tabela e as colunas est√£o em min√∫sculo
    tabela_lower = tabela.lower()
    
    # Sup√µe que a chave prim√°ria da dimens√£o √© 'id_' + nome_da_tabela
    # Ex: 'dim_usuario' -> 'id_usuario'
    id_coluna = f"id_{tabela_lower.split('_')[-1]}"
    
    # 2. Constr√≥i a string SET: 'campo1 = %s, campo2 = %s, ...'
    # Converte os nomes dos campos para min√∫sculas para o PostgreSQL
    set_clause = [f"{campo.lower()} = %s" for campo in campos]
    set_clause_str = ", ".join(set_clause)
    
    # 3. Constr√≥i o SQL de UPDATE
    sql_update = f"""
        UPDATE {tabela_lower} SET
            {set_clause_str}
        WHERE {id_coluna} = %s; 
    """
    
    # 4. Constr√≥i a tupla de valores: (valores_a_atualizar) + (id_registro)
    # A tupla de valores deve ser a lista de novos valores, seguida pelo ID para o WHERE
    valores_com_id = list(valores) + [id_registro]

    try:
        conn = get_connection()
        cursor = conn.cursor()
        
        # Execu√ß√£o: Passa o SQL e a tupla de valores
        # O psycopg2 faz o bind dos %s com os valores na ordem
        cursor.execute(sql_update, valores_com_id) 
        conn.commit()
        return True
        
    except psycopg2.Error as ex: # <<< CORRE√á√ÉO DO DRIVER
        st.error(f"Erro do banco de dados ao atualizar em {tabela_lower}: {ex}")
        if conn: conn.rollback()
        return False
        
    except Exception as e:
        st.error(f"Erro inesperado: {e}")
        if conn: conn.rollback()
        return False

    finally:
        if conn: conn.close()

if 'menu_selecionado' not in st.session_state:
    st.session_state.menu_selecionado = "Registrar Transa√ß√£o"

def autenticar_usuario(login, senha):
    """
    Verifica se o login e a senha correspondem a um registro em dim_usuario.
    Retorna id_usuario, nome_completo e login em caso de sucesso.
    """
    conn = None
    usuario_info = {}
    try:
        # A fun√ß√£o get_connection() deve estar definida em outro lugar do seu main.py
        conn = get_connection()
        cursor = conn.cursor()
        
        # üí° CORRE√á√ÉO DA QUERY: Seleciona id_usuario, dsc_nome e login.
        # A ordem da sele√ß√£o deve ser refletida no mapeamento abaixo.
        sql = "SELECT id_usuario, dsc_nome, login FROM dim_usuario WHERE login = %s AND senha = %s;"
        
        # O placeholder %s √© apropriado para PostgreSQL/Psycopg2 ou MySQL/MySQL Connector.
        cursor.execute(sql, (login, senha))
        
        resultado = cursor.fetchone() 
        
        if resultado:
            # üí° MAPEAMENTO CORRETO: Posi√ß√µes do resultado da query
            # resultado[0] -> id_usuario
            # resultado[1] -> dsc_nome
            # resultado[2] -> login
            usuario_info['id_usuario'] = resultado[0]      # ID (chave que faltava)
            usuario_info['nome_completo'] = resultado[1]   # dsc_nome
            usuario_info['login'] = resultado[2]           # login
            
    except Exception as e:
        # Erro de conex√£o/autentica√ß√£o
        st.error("Ocorreu um erro na autentica√ß√£o. Verifique a conex√£o com o banco de dados e as credenciais.")
        print(f"Erro de autentica√ß√£o: {e}")
        usuario_info = {} # Garante que retorne um dicion√°rio vazio em caso de falha
    finally:
        if conn:
            conn.close()
            
    return usuario_info # Retorna o dicion√°rio com as informa√ß√µes do usu√°rio ou {}

def login_page():
    
    # CR√çTICO: Cria tr√™s colunas para centralizar o formul√°rio
    # [Esquerda (espa√ßo vazio), Centro (formul√°rio), Direita (espa√ßo vazio)]
    # A coluna central com o valor 0.6 garantir√° que o formul√°rio seja estreito.
    col_vazia1, col_form, col_vazia2 = st.columns([1, 0.6, 1])
    
    # Tudo o que est√° relacionado ao login agora deve ser colocado na coluna central
    with col_form:
        st.title("Acesso ao Sistema")
        
        with st.form("login_form"):
            login_input = st.text_input("Login (Usu√°rio)", key="login_input_key") 
            senha_input = st.text_input("Senha", type="password", key="senha_input_key")
            
            submitted = st.form_submit_button("Entrar", use_container_width=True)
            
            if submitted:
                conn = None
                try:
                    conn = get_connection() 
                    cursor = conn.cursor()
                    
                    # Consulta para obter id_usuario e dsc_nome (nome completo)
                    query = sql.SQL("SELECT id_usuario, dsc_nome FROM dim_usuario WHERE login = %s AND senha = %s")
                    cursor.execute(query, (login_input, senha_input))
                    
                    user_data = cursor.fetchone()
                    
                    if user_data:
                        st.session_state.logged_in = True
                        st.session_state.id_usuario_logado = user_data[0]
                        st.session_state.login = login_input
                        st.session_state.nome_completo = user_data[1] 
                        st.session_state.menu_selecionado = "Dashboard"
                        st.success(f"Bem-vindo, {user_data[1]}! Acesso concedido.")
                        st.rerun()
                    else:
                        st.error("Login ou senha incorretos. Tente novamente.")
                        
                except Exception as e:
                    st.error(f"Erro ao tentar conectar ou consultar o banco de dados. Verifique a conex√£o e as credenciais: {e}")
                finally:
                    if conn is not None:
                        conn.close()

def gerar_meses_futuros(data_inicio, n_meses):
    """Gera uma lista de objetos datetime.date para os n meses futuros."""
    datas = []
    for i in range(n_meses):
        datas.append(data_inicio + relativedelta(months=i))
    return datas

def criar_grafico_saldo_combinado(df_saldo, titulo):
    # Pivotar de volta para o formato largo para facilitar a plotagem separada
    df_pivot = df_saldo.pivot_table(
        index='ano_mes',
        columns='Tipo',
        values='Valor'
    ).fillna(0).reset_index()
    
    # Garantir que a ordem dos meses esteja correta
    meses_ordenados = sorted(df_pivot['ano_mes'].unique())
    df_pivot = df_pivot.set_index('ano_mes').reindex(meses_ordenados).reset_index()
    
    fig = go.Figure()

    # 1. Barras de Receita
    fig.add_trace(go.Bar(
        x=df_pivot['ano_mes'],
        y=df_pivot['Receita'],
        name='Receita',
        marker_color='#4BBF7C' # Verde
    ))

    # 2. Barras de Despesa
    fig.add_trace(go.Bar(
        x=df_pivot['ano_mes'],
        y=df_pivot['Despesa'],
        name='Despesa',
        marker_color='#FF6347' # Vermelho
    ))

    # 3. Linha de Saldo
    fig.add_trace(go.Scatter(
        x=df_pivot['ano_mes'],
        y=df_pivot['Saldo_Mensal'],
        name='Saldo',
        mode='lines+markers',
        line=dict(color='#4682B4', width=3), # Azul
        marker=dict(size=8),
        yaxis='y2' # CR√çTICO: Usa um eixo Y secund√°rio para o Saldo
    ))

    # Configura√ß√µes de Layout
    fig.update_layout(
        title=titulo,
        # Eixo Y prim√°rio (Receita/Despesa)
        yaxis=dict(
            title='Receita / Despesa',
            tickformat=".2f"
        ),
        # Eixo Y secund√°rio (Saldo)
        yaxis2=dict(
            title='Saldo',
            overlaying='y',
            side='right',
            tickformat=".2f"
        ),
        barmode='group',
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ),
        xaxis_title='M√™s/Ano'
    )
    
    return fig

# -----------------------------------------------------------------
# FUN√á√ÉO AUXILIAR PARA PROJETAR DADOS FUTUROS
# -----------------------------------------------------------------
def projetar_dados_futuro(df_passado, df_futuro_agregado, meses_futuro_ref):
    # 1. Calcular as M√©dias Mensais Hist√≥ricas (dos √∫ltimos 13 meses)
    
    # Filtrar Receita e Despesa do passado para calcular a m√©dia
    df_receita_despesa_passada = df_passado[
        df_passado['Tipo'].isin(['Receita', 'Despesa'])
    ].copy()
    
    media_mensal = df_receita_despesa_passada.groupby('Tipo')['Valor'].mean().reset_index()
    media_receita = media_mensal[media_mensal['Tipo'] == 'Receita']['Valor'].iloc[0] if 'Receita' in media_mensal['Tipo'].values else 0
    media_despesa = media_mensal[media_mensal['Tipo'] == 'Despesa']['Valor'].iloc[0] if 'Despesa' in media_mensal['Tipo'].values else 0

    # 2. Criar o DataFrame de Proje√ß√£o
    df_projecao = pd.DataFrame({'ano_mes': meses_futuro_ref})
    
    # Preenche inicialmente com as m√©dias hist√≥ricas
    df_projecao['Receita_Projetada'] = media_receita
    df_projecao['Despesa_Projetada'] = media_despesa
    
    # 3. Incorporar dados j√° AGENDADOS
    df_futuro_pivot = df_futuro_agregado.pivot_table(
        index='ano_mes',
        columns='Tipo',
        values='Valor',
        aggfunc='sum'
    ).fillna(0)
    
    # Combina Receita e Receita (Sal√°rio) nos dados futuros
    df_futuro_pivot['Receita_Agendada'] = df_futuro_pivot.get('Receita', 0) + df_futuro_pivot.get('Receita (Sal√°rio)', 0)
    df_futuro_pivot['Despesa_Agendada'] = df_futuro_pivot.get('Despesa', 0)
    
    # Juntar os dados agendados com a proje√ß√£o
    df_projecao = df_projecao.set_index('ano_mes').join(
        df_futuro_pivot[['Receita_Agendada', 'Despesa_Agendada']], 
        how='left'
    ).reset_index().fillna(0)
    
    # 4. Regra de Proje√ß√£o Final: Se Agendado > 0, usar Agendado; sen√£o, usar Projetado.
    df_projecao['Receita'] = np.where(
        df_projecao['Receita_Agendada'] > 0, 
        df_projecao['Receita_Agendada'], 
        df_projecao['Receita_Projetada']
    )
    
    df_projecao['Despesa'] = np.where(
        df_projecao['Despesa_Agendada'] > 0, 
        df_projecao['Despesa_Agendada'], 
        df_projecao['Despesa_Projetada']
    )
    
    # 5. Calcular o Saldo Final
    df_projecao['Saldo_Mensal'] = df_projecao['Receita'] - df_projecao['Despesa']
    
    # 6. Transformar para o formato longo (para plotly)
    df_saldo_futuro_final = pd.melt(
        df_projecao,
        id_vars=['ano_mes'],
        value_vars=['Receita', 'Despesa', 'Saldo_Mensal'],
        var_name='Tipo',
        value_name='Valor'
    )
    
    return df_saldo_futuro_final

# -----------------------------------------------------------------
# FUN√á√ÉO PRINCIPAL DO DASHBOARD
# -----------------------------------------------------------------
def dashboard():
    st.title("üìä Dashboard Financeiro")
    
    # 1. CONSULTA DE DADOS
    try:
        df_transacoes = consultar_dados("stg_transacoes") 
        df_salario = consultar_dados("fact_salario")
        
    except Exception as e:
        st.warning(f"N√£o foi poss√≠vel carregar os dados de transa√ß√£o/sal√°rio. Verifique as tabelas. Erro: {e}")
        return

    if df_transacoes.empty and df_salario.empty:
        st.info("Nenhuma transa√ß√£o ou sal√°rio encontrado para gerar o dashboard.")
        return
    
    # --- PR√â-PROCESSAMENTO GERAL ---
    
    # 1. Preparar df_transacoes (Receitas agendadas e Despesas)
    if not df_transacoes.empty:
        df_transacoes['dt_datatransacao'] = pd.to_datetime(df_transacoes['dt_datatransacao'])
        
        df_transacoes_tipo = df_transacoes.groupby(['dt_datatransacao', 'dsc_tipotransacao'])['vl_transacao'].sum().reset_index()
        df_transacoes_tipo = df_transacoes_tipo.rename(columns={'vl_transacao': 'Valor'})
        df_transacoes_tipo['ano_mes'] = df_transacoes_tipo['dt_datatransacao'].dt.to_period('M').astype(str)
        
        df_transacoes_tipo = df_transacoes_tipo[df_transacoes_tipo['dsc_tipotransacao'].isin(['Receita', 'Despesas'])].copy()
        df_transacoes_tipo['Tipo'] = df_transacoes_tipo['dsc_tipotransacao'].replace({'Despesas': 'Despesa', 'Receita': 'Receita'})
        
        df_transacoes_tipo = df_transacoes_tipo[['ano_mes', 'Tipo', 'Valor']]
    else:
        df_transacoes_tipo = pd.DataFrame(columns=['ano_mes', 'Tipo', 'Valor'])

    # 2. Preparar df_salario (Receitas)
    if not df_salario.empty:
        df_salario['dt_recebimento'] = pd.to_datetime(df_salario['dt_recebimento'])
        
        df_salario_agregado = df_salario.groupby(df_salario['dt_recebimento'].dt.to_period('M'))['vl_salario'].sum().reset_index()
        
        df_salario_agregado['ano_mes'] = df_salario_agregado['dt_recebimento'].astype(str) 
        df_salario_agregado = df_salario_agregado.rename(columns={'vl_salario': 'Valor'})
        df_salario_agregado['Tipo'] = 'Receita (Sal√°rio)'
        
        df_salario_final = df_salario_agregado[['ano_mes', 'Tipo', 'Valor']].copy()
    else:
        df_salario_final = pd.DataFrame(columns=['ano_mes', 'Tipo', 'Valor'])


    # 3. UNIR DADOS (Sal√°rio + Transa√ß√µes)
    df_dados_mensais = pd.concat([
        df_transacoes_tipo,
        df_salario_final
    ])
    
    df_dados_mensais = df_dados_mensais.groupby(['ano_mes', 'Tipo'])['Valor'].sum().reset_index()
    
    
    PALETA_CORES = px.colors.qualitative.Plotly 
    
    # -----------------------------------------------------------------
    # FILTRO DE TEMPO
    # -----------------------------------------------------------------
    today = datetime.date.today()
    
    # 1. VIS√ÉO PASSADA (13 meses: OUT/2024 at√© o m√™s atual - Out/2025)
    start_date_passado = today.replace(day=1) - relativedelta(months=12)
    end_limit_passado = today.replace(day=1) + relativedelta(months=1) 
    
    meses_passado = [
        (today.replace(day=1) - relativedelta(months=i)).strftime('%Y-%m')
        for i in range(12, -1, -1)
    ]
    
    df_passado_saldo = df_dados_mensais[df_dados_mensais['ano_mes'].isin(meses_passado)].copy()
    
    # 2. VIS√ÉO FUTURA (12 meses: Pr√≥ximo m√™s - Nov/2025 at√© Out/2026)
    start_date_futuro = today.replace(day=1) + relativedelta(months=1)
    end_date_futuro = start_date_futuro + relativedelta(months=12)
    
    meses_futuro = [
        (start_date_futuro + relativedelta(months=i)).strftime('%Y-%m')
        for i in range(12) 
    ]

    df_futuro_saldo = df_dados_mensais[df_dados_mensais['ano_mes'].isin(meses_futuro)].copy()


    # -----------------------------------------------------------------
    # GERA√á√ÉO DO DATAFRAME DE SALDO (Passado e Futuro)
    # -----------------------------------------------------------------
    def gerar_df_saldo(df, meses_ref):
        if df.empty: return pd.DataFrame()
        df_pivot = df.pivot_table(index='ano_mes', columns='Tipo', values='Valor', aggfunc='sum').fillna(0)
        df_pivot['Receita'] = df_pivot.get('Receita', 0) + df_pivot.get('Receita (Sal√°rio)', 0)
        df_pivot['Despesa'] = df_pivot.get('Despesa', 0) 
        df_pivot['Saldo_Mensal'] = df_pivot['Receita'] - df_pivot['Despesa']
        df_completo = pd.DataFrame({'ano_mes': meses_ref}).set_index('ano_mes')
        df_pivot = df_completo.join(df_pivot, how='left').fillna(0).reset_index()
        df_saldo_longo = pd.melt(df_pivot, id_vars=['ano_mes'], value_vars=['Receita', 'Despesa', 'Saldo_Mensal'], var_name='Tipo', value_name='Valor')
        return df_saldo_longo
    
    df_saldo_passado_final = gerar_df_saldo(df_passado_saldo, meses_ref=sorted(meses_passado))
    df_saldo_futuro_final = projetar_dados_futuro(df_passado_saldo, df_futuro_saldo, meses_futuro_ref=sorted(meses_futuro))


    # -----------------------------------------------------------------
    # PRIMEIRA LINHA DE GR√ÅFICOS (SALDO)
    # -----------------------------------------------------------------
    col_saldo_passado, col_saldo_futuro = st.columns(2)
    
    with col_saldo_passado:
        st.subheader("Balan√ßo Mensal (Passado)")
        if not df_saldo_passado_final.empty:
            fig3 = criar_grafico_saldo_combinado(df_saldo_passado_final, 'Receitas, Despesas e Saldo (√öltimos 13 Meses)')
            st.plotly_chart(fig3, use_container_width=True)
        else:
            st.info("Dados de balan√ßo insuficientes no per√≠odo passado.")

    with col_saldo_futuro:
        st.subheader("Proje√ß√£o de Balan√ßo (Futuro)")
        if not df_saldo_futuro_final.empty:
            fig4 = criar_grafico_saldo_combinado(df_saldo_futuro_final, 'Proje√ß√£o de Balan√ßo (Pr√≥ximos 12 Meses)')
            st.plotly_chart(fig4, use_container_width=True)
        else:
            st.info("Nenhuma proje√ß√£o de transa√ß√£o dispon√≠vel para o per√≠odo futuro.")

    # -----------------------------------------------------------
    # SEGUNDA LINHA DE GR√ÅFICOS (Evolu√ß√£o por Categoria + Acumulado)
    # -----------------------------------------------------------
    st.markdown("---") 

    col_grafico1, col_grafico2, col_grafico5 = st.columns(3)
    
    # -----------------------------------------------------------------
    # Gr√°fico 1: Evolu√ß√£o Mensal por Categoria (Passado) - Coluna 1
    # -----------------------------------------------------------------
    with col_grafico1:
        st.subheader("Evolu√ß√£o Mensal por Categoria")
        
        df_passado_categoria = df_transacoes[
            (df_transacoes['dt_datatransacao'].dt.date >= start_date_passado) &
            (df_transacoes['dt_datatransacao'].dt.date < end_limit_passado)
        ].copy()
        
        if not df_passado_categoria.empty:
            df_passado_categoria['ano_mes'] = df_passado_categoria['dt_datatransacao'].dt.to_period('M').astype(str)
            df_agregado_mensal = df_passado_categoria.groupby(['ano_mes', 'dsc_categoriatransacao'])['vl_transacao'].sum().reset_index()
            
            meses_ordenados = sorted(df_agregado_mensal['ano_mes'].unique())
            categoria_ordenada = df_agregado_mensal.groupby('dsc_categoriatransacao')['vl_transacao'].sum().sort_values(ascending=False).index.tolist()
            
            fig1 = px.bar(
                df_agregado_mensal,
                x='ano_mes',
                y='vl_transacao',
                color='dsc_categoriatransacao',
                title='Passado (√öltimos 13 Meses)',
                labels={'ano_mes': 'M√™s/Ano', 'vl_transacao': 'Valor Total'},
                category_orders={"ano_mes": meses_ordenados, "dsc_categoriatransacao": categoria_ordenada},
                color_discrete_sequence=PALETA_CORES 
            )
            fig1.update_layout(xaxis_title='M√™s/Ano', yaxis_title='Valor', legend_title='Categoria')
            fig1.update_yaxes(tickformat=".2f") 
            st.plotly_chart(fig1, use_container_width=True)
        else:
            st.info("Dados insuficientes nos √∫ltimos 13 meses.")

    # -----------------------------------------------------------------
    # Gr√°fico 2: Transa√ß√µes por Categoria (Futuro) - Coluna 2
    # -----------------------------------------------------------------
    with col_grafico2:
        st.subheader("Transa√ß√µes Agendadas por Categoria")
        
        df_futuro_categoria = df_transacoes[
            (df_transacoes['dt_datatransacao'].dt.date >= start_date_futuro) &
            (df_transacoes['dt_datatransacao'].dt.date < end_date_futuro)
        ].copy()
        
        if not df_futuro_categoria.empty:
            df_futuro_categoria['ano_mes'] = df_futuro_categoria['dt_datatransacao'].dt.to_period('M').astype(str)
            df_agregado_futuro = df_futuro_categoria.groupby(['ano_mes', 'dsc_categoriatransacao'])['vl_transacao'].sum().reset_index()
            
            meses_futuros_ordenados = sorted(df_agregado_futuro['ano_mes'].unique())
            categoria_futura_ordenada = df_agregado_futuro.groupby('dsc_categoriatransacao')['vl_transacao'].sum().sort_values(ascending=False).index.tolist()
            
            fig2 = px.bar(
                df_agregado_futuro,
                x='ano_mes',
                y='vl_transacao',
                color='dsc_categoriatransacao',
                title='Futuro (Pr√≥ximos 12 Meses)',
                labels={'ano_mes': 'M√™s/Ano', 'vl_transacao': 'Valor Total'},
                category_orders={"ano_mes": meses_futuros_ordenados, "dsc_categoriatransacao": categoria_futura_ordenada},
                color_discrete_sequence=PALETA_CORES 
            )
            fig2.update_layout(xaxis_title='M√™s/Ano', yaxis_title='Valor', legend_title='Categoria')
            fig2.update_yaxes(tickformat=".2f")
            st.plotly_chart(fig2, use_container_width=True)
        else:
            st.info("Nenhuma transa√ß√£o agendada/registrada para o per√≠odo futuro.")

    # -----------------------------------------------------------------
    # Gr√°fico 5: Despesas Acumuladas por Ano (Anual) - Coluna 3
    # -----------------------------------------------------------------
    with col_grafico5:
        st.subheader("Despesas Acumuladas por Ano")
        
        # Filtrar o DataFrame de Transa√ß√µes Apenas para DESPESAS
        df_despesas_acumuladas_anual = df_transacoes[
            df_transacoes['dsc_tipotransacao'] == 'Despesas'
        ].copy()
        
        if not df_despesas_acumuladas_anual.empty:
            df_despesas_acumuladas_anual['Ano'] = df_despesas_acumuladas_anual['dt_datatransacao'].dt.year
            
            df_agregado_anual = df_despesas_acumuladas_anual.groupby(['Ano', 'dsc_categoriatransacao'])['vl_transacao'].sum().reset_index()
            df_agregado_anual['Ano'] = df_agregado_anual['Ano'].astype(str)
            
            # Ajuste de Ordena√ß√£o da Pilha (Cores)
            categoria_ordenada_acumulada = df_agregado_anual.groupby('dsc_categoriatransacao')['vl_transacao'].sum().sort_values(ascending=False).index.tolist()
            
            fig5 = px.bar(
                df_agregado_anual,
                x='Ano',
                y='vl_transacao',
                color='dsc_categoriatransacao',
                barmode='stack',
                title='Distribui√ß√£o de Despesas por Categoria (Acumulado Anual)',
                labels={'vl_transacao': 'Valor Acumulado (R$)', 'dsc_categoriatransacao': 'Categoria'},
                color_discrete_sequence=PALETA_CORES, 
                category_orders={"dsc_categoriatransacao": categoria_ordenada_acumulada}
            )
            
            # Ordena√ß√£o do Eixo X (Ano) √© mantida cronol√≥gica (2023, 2024, 2025)
            fig5.update_layout(
                xaxis_title='Ano', 
                yaxis_title='Valor Acumulado',
                legend_title='Categoria'
            )
            fig5.update_yaxes(tickformat=".2f")
            st.plotly_chart(fig5, use_container_width=True)
        else:
            st.info("Nenhuma despesa registrada para o c√°lculo acumulado por ano.")

    # -----------------------------------------------------------
    # TERCEIRA LINHA DE GR√ÅFICOS (Evolu√ß√£o por Subcategoria + Acumulado)
    # -----------------------------------------------------------
    st.markdown("---") 

    col_grafico6, col_grafico7, col_grafico8 = st.columns(3)
    
    # -----------------------------------------------------------------
    # Gr√°fico 6: Evolu√ß√£o Mensal por Subcategoria (Passado) - Coluna 1
    # -----------------------------------------------------------------
    with col_grafico6:
        st.subheader("Evolu√ß√£o Mensal por Subcategoria")
        
        df_passado_subcategoria = df_transacoes[
            (df_transacoes['dt_datatransacao'].dt.date >= start_date_passado) &
            (df_transacoes['dt_datatransacao'].dt.date < end_limit_passado)
        ].copy()
        
        if not df_passado_subcategoria.empty:
            df_passado_subcategoria['ano_mes'] = df_passado_subcategoria['dt_datatransacao'].dt.to_period('M').astype(str)
            # Agrupar por M√™s e Subcategoria
            df_agregado_mensal_sub = df_passado_subcategoria.groupby(['ano_mes', 'dsc_subcategoriatransacao'])['vl_transacao'].sum().reset_index()
            
            meses_ordenados = sorted(df_agregado_mensal_sub['ano_mes'].unique())
            # Ordenar subcategorias para consist√™ncia de cores
            subcategoria_ordenada = df_agregado_mensal_sub.groupby('dsc_subcategoriatransacao')['vl_transacao'].sum().sort_values(ascending=False).index.tolist()
            
            fig6 = px.bar(
                df_agregado_mensal_sub,
                x='ano_mes',
                y='vl_transacao',
                color='dsc_subcategoriatransacao',
                title='Passado (√öltimos 13 Meses)',
                labels={'ano_mes': 'M√™s/Ano', 'vl_transacao': 'Valor Total'},
                category_orders={"ano_mes": meses_ordenados, "dsc_subcategoriatransacao": subcategoria_ordenada},
                color_discrete_sequence=PALETA_CORES 
            )
            fig6.update_layout(xaxis_title='M√™s/Ano', yaxis_title='Valor', legend_title='Subcategoria')
            fig6.update_yaxes(tickformat=".2f") 
            st.plotly_chart(fig6, use_container_width=True)
        else:
            st.info("Dados insuficientes de subcategorias no per√≠odo passado.")

    # -----------------------------------------------------------------
    # Gr√°fico 7: Transa√ß√µes por Subcategoria (Futuro) - Coluna 2
    # -----------------------------------------------------------------
    with col_grafico7:
        st.subheader("Transa√ß√µes Agendadas por Subcategoria")
        
        df_futuro_subcategoria = df_transacoes[
            (df_transacoes['dt_datatransacao'].dt.date >= start_date_futuro) &
            (df_transacoes['dt_datatransacao'].dt.date < end_date_futuro)
        ].copy()
        
        if not df_futuro_subcategoria.empty:
            df_futuro_subcategoria['ano_mes'] = df_futuro_subcategoria['dt_datatransacao'].dt.to_period('M').astype(str)
            # Agrupar por M√™s e Subcategoria
            df_agregado_futuro_sub = df_futuro_subcategoria.groupby(['ano_mes', 'dsc_subcategoriatransacao'])['vl_transacao'].sum().reset_index()
            
            meses_futuros_ordenados = sorted(df_agregado_futuro_sub['ano_mes'].unique())
            subcategoria_futura_ordenada = df_agregado_futuro_sub.groupby('dsc_subcategoriatransacao')['vl_transacao'].sum().sort_values(ascending=False).index.tolist()
            
            fig7 = px.bar(
                df_agregado_futuro_sub,
                x='ano_mes',
                y='vl_transacao',
                color='dsc_subcategoriatransacao',
                title='Futuro (Pr√≥ximos 12 Meses)',
                labels={'ano_mes': 'M√™s/Ano', 'vl_transacao': 'Valor Total'},
                category_orders={"ano_mes": meses_futuros_ordenados, "dsc_subcategoriatransacao": subcategoria_futura_ordenada},
                color_discrete_sequence=PALETA_CORES 
            )
            fig7.update_layout(xaxis_title='M√™s/Ano', yaxis_title='Valor', legend_title='Subcategoria')
            fig7.update_yaxes(tickformat=".2f")
            st.plotly_chart(fig7, use_container_width=True)
        else:
            st.info("Nenhuma transa√ß√£o agendada/registrada por subcategoria para o per√≠odo futuro.")

    # -----------------------------------------------------------------
    # Gr√°fico 8: Despesas Acumuladas por Subcategoria (Anual) - Coluna 3
    # -----------------------------------------------------------------
    with col_grafico8:
        st.subheader("Despesas Acumuladas por Ano (Subcategoria)")
        
        df_despesas_acumuladas_anual_sub = df_transacoes[
            df_transacoes['dsc_tipotransacao'] == 'Despesas'
        ].copy()
        
        if not df_despesas_acumuladas_anual_sub.empty:
            df_despesas_acumuladas_anual_sub['Ano'] = df_despesas_acumuladas_anual_sub['dt_datatransacao'].dt.year
            
            # Agrupar por Ano e Subcategoria
            df_agregado_anual_sub = df_despesas_acumuladas_anual_sub.groupby(['Ano', 'dsc_subcategoriatransacao'])['vl_transacao'].sum().reset_index()
            df_agregado_anual_sub['Ano'] = df_agregado_anual_sub['Ano'].astype(str)
            
            # Ajuste de Ordena√ß√£o da Pilha (Cores)
            subcategoria_ordenada_acumulada = df_agregado_anual_sub.groupby('dsc_subcategoriatransacao')['vl_transacao'].sum().sort_values(ascending=False).index.tolist()
            
            # Utilizar uma paleta maior, pois h√° muitas subcategorias (Dark24 √© bom para isso)
            fig8 = px.bar(
                df_agregado_anual_sub,
                x='Ano',
                y='vl_transacao',
                color='dsc_subcategoriatransacao',
                barmode='stack',
                title='Distribui√ß√£o de Despesas por Subcategoria (Anual)',
                labels={'vl_transacao': 'Valor Acumulado (R$)', 'dsc_subcategoriatransacao': 'Subcategoria'},
                color_discrete_sequence=px.colors.qualitative.Dark24, # Paleta expandida
                category_orders={"dsc_subcategoriatransacao": subcategoria_ordenada_acumulada}
            )
            
            fig8.update_layout(
                xaxis_title='Ano', 
                yaxis_title='Valor Acumulado',
                legend_title='Subcategoria',
                legend=dict(font=dict(size=10)) # Reduz o tamanho da legenda devido ao n√∫mero de itens
            )
            fig8.update_yaxes(tickformat=".2f")
            st.plotly_chart(fig8, use_container_width=True)
        else:
            st.info("Nenhuma despesa registrada por subcategoria para o c√°lculo acumulado por ano.")

def main():
    # Inicializa o estado de login
    if 'logged_in' not in st.session_state:
        st.session_state.logged_in = False
    if 'menu_selecionado' not in st.session_state:
        st.session_state.menu_selecionado = "Dashboard"
        
    # ----------------------------------------------------------------
    # CONTROLE DE FLUXO: Se n√£o estiver logado, exibe apenas a tela de login
    # ----------------------------------------------------------------
    if not st.session_state.logged_in:
        # A fun√ß√£o login_page() deve estar definida e centralizada
        login_page()
        return 
    
    # Se estiver logado, continua a execu√ß√£o do menu
    
    # --- 1. SIDEBAR (Menu Principal) ---
    with st.sidebar:
        # ALTERA√á√ÉO 1: Usar dsc_nome (nome_completo) em vez de login
        nome_exibido = st.session_state.get('nome_completo', st.session_state.login)
        st.title(f"Menu Principal - Logado como: {nome_exibido}")
        
        # BOT√ïES PRINCIPAIS (Dashboard, Transa√ß√£o, Acerto, Corrigir) - 2 colunas
        col1, col2 = st.columns(2) 

        with col1:
            if st.button("üìä Dashboard", key="btn_dashboard", use_container_width=True):
                st.session_state.menu_selecionado = "Dashboard"
        with col2:
            if st.button("üíµ Transa√ß√£o", key="btn_transacao", use_container_width=True):
                st.session_state.menu_selecionado = "Transa√ß√£o"

        col3, col4 = st.columns(2)
        
        with col3:
            if st.button("üí∞ Acerto", key="btn_acerto", use_container_width=True):
                st.session_state.menu_selecionado = "Acerto de Contas"
        with col4:
            if st.button("üõ†Ô∏è Corrigir", key="btn_corrigir", use_container_width=True):
                st.session_state.menu_selecionado = "Corrigir Transa√ß√£o"
        
        st.subheader("Cadastros (Dimens√µes)")
        
        # Dicion√°rio de Op√ß√µes
        opcoes_cadastro = {
            "üí≥ Tipos de Transa√ß√£o": "Tipos de Transa√ß√£o", 
            "üè∑Ô∏è Categorias": "Categorias",        
            "üìù Subcategorias": "Subcategorias",     
            "üë• Usu√°rios": "Usu√°rios",          
            "üí∞ Sal√°rio": "Sal√°rio",
        }
        
        # ALTERA√á√ÉO 2: Layout de 2 bot√µes por linha para Cadastros
        opcoes_lista = list(opcoes_cadastro.keys())
        
        for i in range(0, len(opcoes_lista), 2):
            col_a, col_b = st.columns(2)
            
            # Bot√£o da coluna A
            nome_opcao_a = opcoes_lista[i]
            nome_limpo_a = opcoes_cadastro[nome_opcao_a]
            
            with col_a:
                if st.button(nome_opcao_a, key=f"btn_cadastro_{nome_limpo_a}", use_container_width=True):
                    st.session_state.menu_selecionado = nome_limpo_a

            # Bot√£o da coluna B (se existir)
            if i + 1 < len(opcoes_lista):
                nome_opcao_b = opcoes_lista[i+1]
                nome_limpo_b = opcoes_cadastro[nome_opcao_b]
                
                with col_b:
                    if st.button(nome_opcao_b, key=f"btn_cadastro_{nome_limpo_b}", use_container_width=True):
                        st.session_state.menu_selecionado = nome_limpo_b
        
        # Bot√µes de Logout/Cache
        st.markdown("---")
        
        if st.button("‚ôªÔ∏è Limpar Cache", on_click=limpar_cache_dados, use_container_width=True):
             pass 
        
        # ALTERA√á√ÉO 3: Estilo CSS espec√≠fico para o bot√£o "üõë Sair"
        st.markdown(
            """
            <style>
            /* Seleciona APENAS o pen√∫ltimo elemento stButton na sidebar (que √© o bot√£o Sair) */
            [data-testid='stSidebar'] div.stButton:nth-last-child(2) > button {
                background-color: #ff4b4b; /* Vermelho padr√£o de erro/Streamlit */
                color: white;
                border-color: #ff4b4b;
            }
            </style>""", unsafe_allow_html=True
        )
        
        if st.button("üõë Sair", key="btn_logout", use_container_width=True):
            st.session_state.logged_in = False
            # Limpa as vari√°veis de sess√£o sens√≠veis
            if 'id_usuario_logado' in st.session_state:
                 del st.session_state.id_usuario_logado
            if 'login' in st.session_state:
                 del st.session_state.login
            if 'nome_completo' in st.session_state:
                 del st.session_state.nome_completo
            st.rerun() 

    # --- 2. EXIBI√á√ÉO DO FORMUL√ÅRIO SELECIONADO ---
    opcao_atual = st.session_state.menu_selecionado
    
    # As fun√ß√µes abaixo devem estar definidas no seu c√≥digo
    if opcao_atual == "Dashboard":
        dashboard()
    elif opcao_atual == "Transa√ß√£o":
        formulario_transacao()
    elif opcao_atual == "Sal√°rio":
        formulario_salario()
    elif opcao_atual == "Corrigir Transa√ß√£o": 
        editar_transacao()
    elif opcao_atual == "Acerto de Contas":
        exibir_detalhe_rateio()
    elif opcao_atual == "Tipos de Transa√ß√£o":
        formulario_tipo_transacao()
    elif opcao_atual == "Categorias":
        formulario_categoria()
    elif opcao_atual == "Subcategorias":
        formulario_subcategoria()
    elif opcao_atual == "Usu√°rios":
        formulario_usuario()

# ESTE BLOCO √â O MAIS CR√çTICO: CHAMA A FUN√á√ÉO main() PARA INICIAR O APP
if __name__ == "__main__":
    main()